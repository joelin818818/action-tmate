name: 在最新Ubuntu上运行脚本并循环检查网络 (通过OpenVPN)

on:
  workflow_dispatch:

jobs:
  run-on-ubuntu:
    runs-on: ubuntu-latest
    timeout-minutes: 60 # Job timeout

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      # --- 步骤调整：此步骤现在在连接 VPN 之前运行 ---
      - name: 下载并运行脚本
        run: curl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o quick_start.sh && sudo bash quick_start.sh
        # 注意: 此脚本将使用机器的直接网络连接，在 VPN 建立之前执行。

      # --- 步骤调整：连接到 OpenVPN 现在是后续步骤 ---
      - name: 连接到 OpenVPN
        run: |
          #!/bin/bash
          set -eux # -e: exit on error, -u: unset variables are errors, -x: print commands

          echo "--- 开始连接 OpenVPN ---"

          OPENVPN_CONFIG_CONTENT="${{ secrets.OPENVPN_CONFIG }}"
          CONFIG_DIR="/etc/openvpn/client"
          CONFIG_FILE="${CONFIG_DIR}/client.conf"
          PID_FILE="/tmp/openvpn.pid"

          echo "安装 OpenVPN 软件包..."
          if ! dpkg -s openvpn > /dev/null 2>&1; then
            sudo apt-get update
            sudo apt-get install -y openvpn
          else
            echo "OpenVPN 软件包已安装."
          fi

          echo "创建配置目录: ${CONFIG_DIR}"
          sudo mkdir -p "${CONFIG_DIR}"
          sudo chmod 700 "${CONFIG_DIR}"

          echo "创建 OpenVPN 配置文件: ${CONFIG_FILE} (从 Secret)"
          echo "${OPENVPN_CONFIG_CONTENT}" | sudo sh -c "cat > ${CONFIG_FILE}"
          sudo chmod 600 "${CONFIG_FILE}"

          echo "启动 OpenVPN 客户端 (后台运行，显示所有日志)..."
          sudo openvpn --config "${CONFIG_FILE}" --writepid "${PID_FILE}" &

          echo "等待 OpenVPN 初始化 (5 秒)..."
          sleep 5

          echo "验证 OpenVPN 连接..."
          TIMEOUT_SECONDS=90
          VPN_IFACE="tun0" # 关键: 确认您的 VPN 接口名称
          # DETECTED_IFACE=$(ip -o link show | awk -F': ' '/tun[0-9]+/ {print $2; exit}')
          # if [ -z "$DETECTED_IFACE" ]; then
          #   echo "✗ 错误：未找到 tun 接口。"
          #   if [ -f "${PID_FILE}" ] && ps -p "$(cat ${PID_FILE} 2>/dev/null)" > /dev/null; then sudo kill "$(cat ${PID_FILE})"; fi
          #   exit 1
          # fi
          # VPN_IFACE="$DETECTED_IFACE"
          # echo "检测到并使用 VPN 接口: ${VPN_IFACE}"

          END_TIME=$((SECONDS + TIMEOUT_SECONDS))

          while [ $SECONDS -lt $END_TIME ]; do
            echo "检查 ${VPN_IFACE} 接口和路由... 剩余 $((END_TIME - SECONDS)) 秒"
            if ip addr show "${VPN_IFACE}" &>/dev/null && ip addr show "${VPN_IFACE}" | grep -q "inet "; then
              echo "✓ ${VPN_IFACE} 接口找到并已分配 IP 地址!"
              DEFAULT_ROUTE=$(ip route show default)
              if echo "$DEFAULT_ROUTE" | grep -q "${VPN_IFACE}"; then
                echo "✓ VPN 连接成功，默认路由通过 ${VPN_IFACE}."
                echo "=== IP Addr (${VPN_IFACE}) ==="
                ip addr show "${VPN_IFACE}"
                echo "=== Route Table (Default) ==="
                ip route show default
                echo "--- OpenVPN 连接步骤完成 ---"
                exit 0
              else
                echo "✗ ${VPN_IFACE} 接口存在并有 IP，但默认路由未通过 VPN。当前默认路由:"
                echo "${DEFAULT_ROUTE}"
                echo "完整路由表:"
                ip route show
              fi
            else
              echo "等待 ${VPN_IFACE} 接口出现并获取 IP 地址..."
            fi

            if ! ( [ -f "${PID_FILE}" ] && ps -p "$(cat ${PID_FILE} 2>/dev/null)" > /dev/null ); then
                echo "✗ OpenVPN 进程 (PID 文件: ${PID_FILE}) 似乎已意外退出。"
                exit 1
            fi
            sleep 10
          done

          echo "✗ OpenVPN 连接超时或未建立默认路由（${TIMEOUT_SECONDS}秒内）。"
          echo "=== Route Table ==="
          ip route show
          echo "=== IP Addr ==="
          ip addr show
          echo "=== All Interfaces ==="
          ip link show
          echo "==================="
          if [ -f "${PID_FILE}" ] && ps -p "$(cat ${PID_FILE} 2>/dev/null)" > /dev/null; then
            echo "尝试停止 OpenVPN 进程 (PID: $(cat ${PID_FILE}))..."
            sudo kill "$(cat ${PID_FILE})" || echo "警告：无法停止 OpenVPN 进程，可能已退出。"
          else
            echo "OpenVPN 进程未运行或 PID 文件 (${PID_FILE}) 未找到。"
          fi
          exit 1
        shell: bash

      # --- 此步骤现在在 VPN 连接之后运行 ---
      - name: 循环检查网络连接和状态
        run: |
          #!/bin/bash
          set -e 

          echo "开始持续检查网络连接 (每隔 1 分钟一次)"

          while true; do
            echo "--- 网络检查开始 $(date) ---"
            TARGET_URL="https://www.google.com"
            if curl -sSL --fail --max-time 10 --connect-timeout 5 -o /dev/null "${TARGET_URL}"; then
              echo "✓ ${TARGET_URL} 连接成功并通过 VPN 响应正常。"
            else
              STATUS_CODE=$(curl -sSL --max-time 10 --connect-timeout 5 -o /dev/null -w "%{http_code}" "${TARGET_URL}")
              echo "✗ ${TARGET_URL} 连接失败或响应异常 (状态码: ${STATUS_CODE}) (通过 VPN)。"
            fi
            echo "--- 网络检查结束 $(date) ---"
            sleep 60
          done
        shell: bash
