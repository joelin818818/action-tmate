name: 在最新Ubuntu上运行脚本并循环检查网络 (通过OpenVPN) # 工作流名称

on:
  workflow_dispatch: # 手动触发此工作流运行

jobs:
  run-on-ubuntu: # 作业名称
    runs-on: ubuntu-latest # 在最新的Ubuntu环境上运行
    timeout-minutes: 60 # 设置作业超时时间，防止长时间运行

    steps:
      # Step 1: 检出代码
      - name: 检出代码 # 步骤名称
        uses: actions/checkout@v4 # 使用actions/checkout@v4来检出代码仓库

      # --- Step 2: 启动 OpenVPN 守护进程并验证出口IP国家 ---
      # OpenVPN 进程在此步骤启动并保持运行，并通过验证出口IP来确认连接成功
      - name: 启动OpenVPN守护进程并验证出口IP国家 # 步骤名称已更改
        id: setup-vpn # 此步骤的唯一ID，供后续步骤引用
        run: | # 在Ubuntu运行器上执行Shell脚本
          #!/bin/bash
          # 遇到错误或使用未定义变量时立即退出，除非特别处理
          set -eu

          # OpenVPN 守护进程的 PID 文件路径
          PID_FILE="/tmp/openvpn_daemon.pid"

          echo "--- [阶段 1/3] 启动 OpenVPN 守护进程并验证出口IP国家 ---"

          echo "[VPN Setup] 安装 OpenVPN 软件包..."
          if ! dpkg -s openvpn > /dev/null 2>&1; then
            sudo apt-get update
            sudo apt-get install -y openvpn
          else
            echo "[VPN Setup] OpenVPN 软件包已安装."
          fi

          local OPENVPN_CONFIG_CONTENT="${{ secrets.OPENVPN_CONFIG }}" # 从 Secrets 获取 VPN 配置
          local CONFIG_DIR="/etc/openvpn/client"
          local CONFIG_FILE="${CONFIG_DIR}/client.conf"

          echo "[VPN Setup] 创建配置目录: ${CONFIG_DIR}"
          sudo mkdir -p "${CONFIG_DIR}"
          sudo chmod 700 "${CONFIG_DIR}" # 设置目录权限

          echo "[VPN Setup] 创建 OpenVPN 配置文件: ${CONFIG_FILE}"
          echo "${OPENVPN_CONFIG_CONTENT}" | sudo sh -c "cat > ${CONFIG_FILE}"
          sudo chmod 600 "${CONFIG_FILE}" # 设置文件权限

          echo "[VPN Setup] 使用 nohup 启动 OpenVPN 守护进程 (PID 到 ${PID_FILE})..."
          # 使用 nohup 和 & 让 OpenVPN 在后台运行，并尝试使其在此步骤结束后继续存在
          # --writepid 将守护进程的 PID 写入文件
          # --verb 3 控制 OpenVPN 自身的日志级别
          # >/dev/null 2>&1 重定向 OpenVPN 日志到空，减少 Actions 日志量
          nohup sudo openvpn --config "${CONFIG_FILE}" --writepid "${PID_FILE}" --verb 3 >/dev/null 2>&1 &
          # $! 是 nohup 命令的 PID，不是 OpenVPN 守护进程的 PID

          echo "[VPN Setup] 等待 OpenVPN 守护进程 PID 文件出现并确认进程运行 (最多 20 秒)..."
          local WAIT_PID_TIMEOUT=20 # 等待 PID 文件和进程出现的时间
          local END_WAIT_PID=$((SECONDS + WAIT_PID_TIMEOUT))
          local daemon_pid=""

          # 循环等待 PID 文件和进程
          while [ $SECONDS -lt $END_WAIT_PID ]; do
              if [ -f "${PID_FILE}" ] && [ -s "${PID_FILE}" ]; then # 检查文件是否存在且非空
                   daemon_pid=$(cat "${PID_FILE}")
                   if ps -p "$daemon_pid" > /dev/null 2>&1; then # 检查 PID 是否对应一个运行的进程
                       echo "[VPN Setup] OpenVPN 守护进程已启动，PID: $daemon_pid."
                       break # 找到 PID 且进程运行，跳出循环
                   fi
              fi
              sleep 1 # 每秒检查一次
          done

          # 检查最终是否确认守护进程运行。如果守护进程都没起来，直接失败。
          if [ -z "$daemon_pid" ] || ! ps -p "$daemon_pid" > /dev/null 2>&1; then # Check if daemon_pid is empty OR process not running
              echo "[VPN Setup] ✗ OpenVPN 守护进程未能在 ${WAIT_PID_TIMEOUT} 秒内确认运行。启动失败。"
              exit 1 # 步骤失败
          fi

          echo "[VPN Setup] ✓ OpenVPN 守护进程确认运行。开始验证出口IP国家..."

          # --- 验证出口IP国家循环 ---
          local VERIFY_TIMEOUT_SECONDS=300 # 验证出口IP的总超时时间 (例如 5 分钟)
          local CHECK_INTERVAL_SECONDS=5 # 每次验证检查的间隔时间 (例如 5 秒)
          local END_VERIFY_TIME=$((SECONDS + VERIFY_TIMEOUT_SECONDS))
          local TARGET_COUNTRY_CODE="CN" # <--- 您期望的出口国家代码
          # 获取出口IP国家的服务 URL
          local IP_COUNTRY_SERVICE_URL="https://ipinfo.io/country" # 可选其他服务如 https://ip.gs/country

          # 循环进行出口IP国家验证
          while [ $SECONDS -lt $END_VERIFY_TIME ]; do
              # 检查 OpenVPN 守护进程是否仍在运行 (重要检查)
              if ! ps -p "$daemon_pid" > /dev/null 2>&1; then
                 echo "[VPN Setup] ✗ OpenVPN 守护进程意外退出 (PID: $daemon_pid) 在验证过程中。"
                 exit 1 # 步骤失败
              fi

              echo "[VPN Setup] 尝试获取出口IP国家并验证 (${TARGET_COUNTRY_CODE})... 剩余 $((END_VERIFY_TIME - SECONDS)) 秒"

              local current_country=""
              # 使用 curl 获取出口国家代码
              # -sS: silent, show errors; --fail: fail on non-2xx HTTP or connection errors; --max-time: 总超时; --connect-timeout: 连接超时
              if current_country=$(curl -sS --fail --max-time 10 "$IP_COUNTRY_SERVICE_URL" 2>/dev/null); then
                  # Curl 成功，检查获取到的国家代码
                  echo "[VPN Setup] 检测到的出口IP国家: ${current_country}"
                  if [ "$current_country" = "$TARGET_COUNTRY_CODE" ]; then
                      echo "[VPN Setup] ✓ 出口IP国家 (${current_country}) 符合预期 (${TARGET_COUNTRY_CODE}). VPN 连接验证成功。"
                      echo "--- [阶段 1/3] VPN 连接已成功验证 ---"
                      exit 0 # <-- 验证成功，步骤以 0 退出
                  else
                      echo "[VPN Setup] ✗ 出口IP国家 (${current_country}) 不符合预期 (${TARGET_COUNTRY_CODE})."
                  fi
              else
                  # curl 失败 (网络不通, 服务不可达, HTTP错误等)
                  local curl_status=$?
                  echo "[VPN Setup] ✗ 无法获取出口IP国家 (${IP_COUNTRY_SERVICE_URL} 不可达或返回错误). Curl exited with: ${curl_status}."
              fi

              sleep ${CHECK_INTERVAL_SECONDS} # 等待指定间隔进行下一次检查
          done

          # 如果循环超时仍未验证成功
          echo "[VPN Setup] ✗ 出口IP国家验证超时（${VERIFY_TIMEOUT_SECONDS}秒内未能检测到符合预期的出口IP国家）。"
          exit 1 # 步骤失败由于验证超时

        shell: bash # 使用 bash 执行脚本

      # --- Step 3: 下载 quick_start.sh 脚本 ---
      # 此步骤将在上一步成功后自动运行
      - name: 下载 quick_start.sh 脚本 (安装程序) # 步骤名称已更改，说明用途
        id: download-script # 给此步骤一个新ID，反映其新目的
        needs: setup-vpn # 此步骤依赖 Step 2 ('setup-vpn') 成功
        run: | # 在Ubuntu运行器上执行Shell脚本
          #!/bin/bash
          # 遇到错误、使用未定义变量时立即退出，并打印执行的命令
          set -eux

          echo "--- [阶段 2/3] 下载 quick_start.sh 脚本 (用于安装 1Panel) ---" # 更新日志信息

          echo "[Download Task] 下载 quick_start.sh 脚本..."
          # 只保留下载命令，删除 chmod, sleep, sudo bash 执行命令
          curl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o quick_start.sh

          echo "[Download Task] ✓ quick_start.sh 下载完毕。"
          # set -eux 会确保如果 curl 下载失败，此脚本会以非零退出码退出
          # 如果下载成功，脚本会自动以 0 退出
        shell: bash # 使用 bash 执行脚本

      # --- Step 4: 循环检查外部网络 ---
      # 此步骤将在 Step 3 (现在是 'download-script') 成功后自动运行，并会持续运行直到作业超时或检查失败
      - name: 循环检查外部网络 # 步骤名称
        needs: download-script # 依赖 Step 3 ('download-script') 成功
        run: | # 在Ubuntu运行器上执行Shell脚本
          # 在此脚本中启用 set -e，遇到错误（如 curl --fail 失败）立即退出
          set -e

          # --- 此步骤的清理函数 ---
          # 此 trap 确保当本步骤退出时，OpenVPN 守护进程被尝试停止
          local OPENVPN_DAEMON_PID_FILE="/tmp/openvpn_daemon.pid" # OpenVPN PID 文件路径
          cleanup_processes_step3() {
              echo "--- [阶段 3/3] 清理 OpenVPN 守护进程 ---"
              # 检查 PID 文件是否存在且进程正在运行
              if [ -f "${OPENVPN_DAEMON_PID_FILE}" ] && ps -p "$(cat ${OPENVPN_DAEMON_PID_FILE} 2>/dev/null)" > /dev/null 2>&1; then
                  local daemon_pid=$(cat ${OPENVPN_DAEMON_PID_FILE})
                  echo "[Cleanup] 尝试停止 OpenVPN 守护进程 (PID: $daemon_pid)..."
                  sudo kill "$daemon_pid" || true # 发送 SIGTERM 信号
                  sleep 2 # 等待进程退出
                  # 如果进程仍在运行，发送 SIGKILL 信号强制终止
                  if ps -p "$daemon_pid" > /dev/null 2>&1; then
                      echo "[Cleanup] OpenVPN 守护进程 (PID: $daemon_pid) 未优雅退出，尝试强制停止 (SIGKILL)..."
                      sudo kill -9 "$daemon_pid" || true
                  fi
                  sudo rm -f "${OPENVPN_DAEMON_PID_FILE}" || true # 清理 PID 文件
              fi
              echo "--- [阶段 3/3] 清理完成 ---"
          }
          # 设置 trap，在当前步骤退出时执行清理函数
          trap cleanup_processes_step3 EXIT

          echo "--- [阶段 3/3] 启动持续外部网络检查循环 ---"

          echo "[Network Check] 等待 30 秒确保网络稳定后开始检查循环..."
          sleep 30 # 开始循环前的等待

          echo "[Network Check] 循环开始前的网络状态简要检查:"
          ip route show default || echo "无法获取默认路由" # 显示当前默认路由

          # 无限循环进行网络检查
          while true; do
            echo "[Network Check] --- 外部检查开始 $(date) ---"
            local TARGET_URL="https://www.google.com" # 检查外部连通性的目标 URL
            # 使用 --fail 选项：如果 HTTP 状态码非 2xx 或发生连接错误，curl 将以非零退出码退出
            # 由于设置了 set -e，curl 失败将导致本脚本在此处立即终止
            if curl -sSL --fail --max-time 10 --connect-timeout 5 -o /dev/null "${TARGET_URL}"; then
              echo "[Network Check] ✓ ${TARGET_URL} 连接成功。" # 检查成功
            else
              # curl 失败时的日志信息
              local STATUS_CODE=$(curl -sSL --max-time 10 --connect-timeout 5 -o /dev/null -w "%{http_code}" "${TARGET_URL}" || echo "N/A")
              echo "[Network Check] ✗ ${TARGET_URL} 连接失败或异常响应 (状态码: ${STATUS_CODE})。本任务将退出。"
              exit 1 # 显式退出，触发 set -e 和 trap
            fi
            echo "[Network Check] --- 外部检查结束 $(date) ---"
            sleep 60 # 等待 1 分钟进行下一次检查
          done
          # 这是一个无限循环，正常情况下不会执行到这里，除非脚本因错误退出

        shell: bash # 使用 bash 执行脚本
